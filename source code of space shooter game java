import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

public class SpaceShooterGame extends JPanel implements ActionListener, KeyListener {
    private Timer timer;
    private int spaceshipX = 300, spaceshipY = 500;
    private int spaceshipSpeed = 10;
    private ArrayList<Rectangle> bullets = new ArrayList<>();
    private ArrayList<Rectangle> enemies = new ArrayList<>();
    private Random random = new Random();
    private int score = 0;
    private boolean gameRunning = true;

    public SpaceShooterGame() {
        setFocusable(true);
        setPreferredSize(new Dimension(600, 600));
        addKeyListener(this);
        timer = new Timer(30, this); // Game loop timer
        timer.start();
        spawnEnemies();
    }

    private void spawnEnemies() {
        new Thread(() -> {
            while (gameRunning) {
                try {
                    Thread.sleep(1000); // Spawn enemies every second
                    enemies.add(new Rectangle(random.nextInt(550), 0, 50, 50));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (gameRunning) {
            // Background
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());

            // Spaceship
            g.setColor(Color.BLUE);
            g.fillRect(spaceshipX, spaceshipY, 50, 50);

            // Bullets
            g.setColor(Color.YELLOW);
            for (Rectangle bullet : bullets) {
                g.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            }

            // Enemies
            g.setColor(Color.RED);
            for (Rectangle enemy : enemies) {
                g.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
            }

            // Score
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, 16));
            g.drawString("Score: " + score, 10, 20);
        } else {
            // Game Over Screen
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, 30));
            g.drawString("Game Over", 200, 250);
            g.setFont(new Font("Arial", Font.PLAIN, 20));
            g.drawString("Your Score: " + score, 220, 300);
            g.drawString("Press R to Restart", 200, 350);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (gameRunning) {
            // Move bullets
            for (int i = 0; i < bullets.size(); i++) {
                Rectangle bullet = bullets.get(i);
                bullet.y -= 15;
                if (bullet.y < 0) bullets.remove(i);
            }

            // Move enemies
            for (int i = 0; i < enemies.size(); i++) {
                Rectangle enemy = enemies.get(i);
                enemy.y += 5;
                if (enemy.y > 600) enemies.remove(i);
            }

            // Check collisions
            for (int i = 0; i < bullets.size(); i++) {
                Rectangle bullet = bullets.get(i);
                for (int j = 0; j < enemies.size(); j++) {
                    Rectangle enemy = enemies.get(j);
                    if (bullet.intersects(enemy)) {
                        bullets.remove(i);
                        enemies.remove(j);
                        score += 10;
                        break;
                    }
                }
            }

            // Check if enemies hit the spaceship
            for (Rectangle enemy : enemies) {
                if (enemy.intersects(new Rectangle(spaceshipX, spaceshipY, 50, 50))) {
                    gameRunning = false;
                    timer.stop();
                }
            }

            repaint();
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (gameRunning) {
            if (e.getKeyCode() == KeyEvent.VK_LEFT && spaceshipX > 0) {
                spaceshipX -= spaceshipSpeed;
            }
            if (e.getKeyCode() == KeyEvent.VK_RIGHT && spaceshipX < 550) {
                spaceshipX += spaceshipSpeed;
            }
            if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                bullets.add(new Rectangle(spaceshipX + 22, spaceshipY, 5, 10));
            }
        } else {
            if (e.getKeyCode() == KeyEvent.VK_R) {
                restartGame();
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

    private void restartGame() {
        gameRunning = true;
        spaceshipX = 300;
        spaceshipY = 500;
        bullets.clear();
        enemies.clear();
        score = 0;
        timer.start();
        spawnEnemies();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Space Shooter");
        SpaceShooterGame game = new SpaceShooterGame();
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
